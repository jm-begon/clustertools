#!/usr/bin/env python

from __future__ import print_function

#TODO regular expression style

__author__ = "Begon Jean-Michel <jm.begon@gmail.com>"
__copyright__ = "3-clause BSD License"

import time, datetime
import argparse
import subprocess, os
import socket
from clustertools import Historic, load_experiment_names

__LH__ = "localhost"
__WC__ = "*"

if __name__ == "__main__":
    description = "Clustertools task monitoring script"
    doc = """The experiment(s) to monitor.
Use ssh-like syntax: 'luke@skywalker:exp_about_the_force'. The first part can
be omitted for local survey. A wildcard '%s' can be used to list all the
experiment. Several queries are separated by a space. Queries for a remote
host are sent as once. By default, all the local experiment are listed
""" % __WC__


    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("queries", help=doc, nargs="*")
    parser.add_argument("-l", "--loop", default=-1, type=int,
                        help="Number of minute to wait between two refreshment. Set to negative (default) for no refreshment.")

    # =========== Preprocessing ============= #

    args = parser.parse_args()
    queries = args.queries
    if len(queries) == 0:
        queries = ["*"]

    # Sort query by host to group them
    sorted_queries = defaultdict(list)
    for query in queries:
        try:
            host, exp_name = query.split(":")
        except ValueError:
            host = __LH__
            exp_name = query
        sorted_queries[host] = exp_name

    # =========== Main ============= #

    def main():
        # Local queries
        try:
            hostname = socket.gethostname()
        except:
            hostname = "Unkown host"
        if __LH__ in sorted_queries:
            for exp_name in sorted_queries[__LH__]:
                if exp_name == __WC__:
                    print(hostname, ":")
                    for name in load_experiment_names():
                        print("\t", name, Historic(name).count_by_state())
                else:
                    print(hostname,":", exp_name, Historic(exp_name).count_by_state())
            del sorted_queries[__LH__]

        # Remote queries
        cmd = "ssh {host} {prog} {exp}".format(prog=args.prog)
        for host, exp_names in sorted_queries.iteritems():
            exp_string = " ".join(exp_names)
            subprocess.call(cmd.format(host=host, exp=exp_string), shell=True)

    if args.loop < 0:
        main()
    else:
        while True:
            os.system("clear")
            print(datetime.datetime.now().strftime("%A %d %h %Y %H:%M:%S"))
            main()
            time.sleep(args.loop*60)
