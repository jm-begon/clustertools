#!/usr/bin/env python

from __future__ import print_function

import time
import datetime
import argparse
import subprocess
import os
import socket
import sys
from collections import defaultdict
import re

from clustertools import Monitor, Architecture, shutup_logger


__author__ = "Begon Jean-Michel <jm.begon@gmail.com>"
__copyright__ = "3-clause BSD License"

__LH__ = "localhost"
__WC__ = "*"

if __name__ == "__main__":
    description = "Clustertools task monitoring script"
    doc = """The experiment(s) to monitor.
Use ssh-like syntax: 'luke@skywalker:exp_about_the_force'. The first part can
be omitted for local survey. A wildcard '%s' can be used to list all the
experiment. Several queries are separated by a space. Queries for a remote
host are sent as once. By default, all the local experiment are listed
""" % __WC__

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("queries", help=doc, nargs="*")
    parser.add_argument("-l", "--loop", default=-1, type=int,
                        help="Number of minute to wait between two "
                             "refreshment. Set to negative (default) for no "
                             "refreshment.")
    parser.add_argument("-n", "--n-progress", default=10, type=int,
                        help="Number of lines of progress to show per "
                             "experiment")

    shutup_logger()

    # =========== Preprocessing ============= #

    args = parser.parse_args()
    queries = args.queries
    if len(queries) == 0:
        queries = ["*"]

    # Sort query by host to group them
    sorted_queries = defaultdict(list)
    for query in queries:
        try:
            host, exp_name = query.split(":")
        except ValueError:
            host = __LH__
            exp_name = query
        sorted_queries[host].append(exp_name)

    # =========== Main ============= #

    def main():
        if __LH__ in sorted_queries:
            # Local queries
            try:
                hostname = socket.gethostname()
            except Exception:
                hostname = "Unknown host"
            print(hostname, ":")

            for query in sorted_queries[__LH__]:
                if query == __WC__:
                    query = r".*"
                regex = re.compile(query)
                for name in Architecture().load_experiment_names():
                    if regex.search(name) is not None:
                        try:
                            monitor = Monitor(name)
                            print("\t", name, monitor.count_by_state())
                            for i, (comp_name, progress) in enumerate(monitor.get_working_progress().items()):
                                print("\t\t{} - {:.2f} %".format(comp_name,
                                                                 progress*100))
                                if i >= args.n_progress:
                                    print("\t\t...")
                                    break
                        except Exception as e:
                            print("\t {} ??? ({})".format(name, repr(e)))

        # Remote queries
        cmd = "ssh {host} {prog} -n {n_progress} {exp}"
        prog = os.path.basename(sys.argv[0])
        for host, exp_names in sorted_queries.items():
            if host == __LH__:
                continue
            exp_string = " ".join(exp_names)
            act_cmd = cmd.format(host=host, prog=prog,
                                 n_progress=args.n_progress, exp=exp_string)
            subprocess.call(act_cmd, shell=True)

    if args.loop < 0:
        main()
    else:
        try:
            while True:
                os.system("clear")
                print(datetime.datetime.now().strftime("%A %d %h %Y %H:%M:%S"))
                main()
                time.sleep(args.loop*60)
        except (KeyboardInterrupt, SystemExit):
            print("")
