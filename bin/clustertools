#!/usr/bin/env python

import argparse
import datetime
import pickle
import time
import os
import re
import socket
from abc import abstractmethod, ABCMeta, abstractclassmethod
from collections import OrderedDict

import sys

import subprocess

import dill

from clustertools import Experiment
from clustertools import Monitor
from clustertools import shutup_logger
from clustertools.parser import or_none
from clustertools.storage import PickleStorage, Architecture

__author__ = "Begon Jean-Michel <jm.begon@gmail.com>"
__copyright__ = "3-clause BSD License"

__LH__ = "localhost"
__WC__ = "*"

query_doc = "The query. Use ssh-like syntax: \
'luke@skywalker:exp_about_the_force'. The first part can \
be omitted for local survey."
queries_doc = query_doc + " A wildcard '{}' can be used to list all the \
experiment.".format(__WC__)


# ================================= UTILITIES ================================ #
def split_host_and_exp(query):
    try:
        host, exp_name = query.split(":")
    except ValueError:
        host = None
        exp_name = query
    return host, exp_name


def rearrange_queries(queries):
    sorted_queries = OrderedDict()
    for query in queries:
        host, exp_name = split_host_and_exp(query)
        by_host = sorted_queries.get(host, None)
        if by_host is None:
            by_host = []
            sorted_queries[host] = by_host
        by_host.append(exp_name)
    return sorted_queries


def get_prog():
    return os.path.basename(sys.argv[0])


def filter_experiment(pattern=__WC__, architecture=Architecture()):
    if pattern == __WC__:
        pattern = r".*"
    regex = re.compile(pattern)
    for name in Architecture().load_experiment_names():
        if regex.search(name) is not None:
            yield name


# ================================== SUBPROG ================================= #
class Query(object):
    def __init__(self, host, subprog):
        self._host = host
        self._subporg = subprog

    @property
    def host(self):
        return self._host

    @property
    def subprog(self):
        return self._subporg

    @abstractmethod
    def craft_remote_query(self):
        pass

    @abstractmethod
    def __call__(self):
        pass


class SimpleQuery(Query):
    def __init__(self, host, subprog, exp_name, func):
        super().__init__(host, subprog)
        self._exp_name = exp_name
        self._func = func

    @property
    def exp_name(self):
        return self._exp_name

    def craft_remote_query(self):
        return 'ssh {host} "{prog} {subprog} {exp_name}"' \
               ''.format(host=self.host if self.host is not None else __LH__,
                         prog=get_prog(),
                         subprog=self.subprog,
                         exp_name=self.exp_name)

    def __call__(self):
        self._func(self._exp_name)


class SubProg(object, metaclass=ABCMeta):
    @abstractclassmethod
    def subprog_name(cls):
        pass

    @abstractclassmethod
    def fill_in_subparser(cls, parser):
        pass

    @abstractclassmethod
    def to_queries(cls, **kwargs):
        pass

    @classmethod
    def run(cls, namespace):
        for query in cls.to_queries(**vars(namespace)):
            if query.host is None:
                # Local query
                query()
            else:
                # Remote query
                subprocess.call(query.craft_remote_query(), shell=True)


class Counter(SubProg):
    class CounterQuery(Query):
        def __init__(self, host, subprog, n_progress, exp_name, *exp_names):
            super().__init__(host, subprog)
            self.exp_names = [exp_name] + list(exp_names)
            self.n_progress = n_progress

        def craft_remote_query(self):
            return "ssh {host} '{prog} {subprog} -n {n_progress} {exp}'" \
                   "".format(
                        host=self.host if self.host is not None else __LH__,
                        prog=get_prog(),
                        subprog=self.subprog,
                        n_progress=self.n_progress,
                        exp=" ".join(self.exp_names))

        def __call__(self):
            try:
                hostname = socket.gethostname()
            except Exception:
                hostname = "Unknown host"
            print(hostname, ":")

            for exp_name in self.exp_names:
                for name in filter_experiment(exp_name):
                    try:
                        monitor = Monitor(name)
                        print("\t", name, monitor.count_by_state())
                        for i, (comp_name, progress) in enumerate(
                                monitor.get_working_progress().items()):
                            print("\t\t{} - {:.2f} %".format(comp_name,
                                                             progress * 100))
                            if i >= args.n_progress:
                                print("\t\t...")
                                break
                    except Exception as e:
                        print("\t {} ??? ({})".format(name, repr(e)))

    @classmethod
    def subprog_name(cls):
        return "count"

    @classmethod
    def fill_in_subparser(cls, parser):
        parser_count = parser.add_parser(cls.subprog_name())
        parser_count.add_argument("queries", help=queries_doc, nargs="*")
        parser_count.add_argument("-l", "--loop", default=-1, type=int,
                                  help="Number of minute to wait between two "
                                       "refreshment. Set to negative (default) for "
                                       "no refreshment.")
        parser_count.add_argument("-n", "--n-progress", default=10, type=int,
                                  help="Number of lines of progress to show per "
                                       "experiment")
        parser_count.set_defaults(func=cls.run)
        return parser_count

    @classmethod
    def to_queries(cls, queries, n_progress, **kwargs):
        if len(queries) == 0:
            yield cls.CounterQuery(None, cls.subprog_name(), n_progress,
                                   __WC__)
        for host, exp_names in rearrange_queries(queries).items():
            yield cls.CounterQuery(host, cls.subprog_name(),
                                   n_progress, *exp_names)

    @classmethod
    def run(cls, namespace):
        if namespace.loop < 0:
            super().run(namespace)
        else:
            try:
                while True:
                    os.system("clear")
                    print(datetime.datetime.now().strftime(
                        "%A %d %h %Y %H:%M:%S"))
                    super().run(namespace)
                    time.sleep(args.loop * 60)
            except (KeyboardInterrupt, SystemExit):
                print("")
                sys.exit(0)


class Displayer(SubProg):
    class PrintQuery(Query):
        def __init__(self, host, subprog, type, exp_name, comp_name,
                     last_lines):
            super().__init__(host, subprog)
            self.type = type
            self.exp_name = exp_name
            self.comp_name = comp_name
            self.last_lines = last_lines

        def __repr__(self):
            return "{cls}(host={host}, subprog={subprog}, type={type}," \
                   "exp_name={exp_name}, comp_name={comp_name}, " \
                   "last_lines={last_lines})" \
                   "".format(cls=self.__class__.__name__,
                             host=repr(self.host),
                             subprog=repr(self.subprog),
                             type=repr(self.type),
                             exp_name=repr(self.exp_name),
                             comp_name=repr(self.comp_name),
                             last_lines=repr(self.last_lines))

        def craft_remote_query(self):
            return 'ssh {host} "{prog} {subprog} --last-line {last_lines} ' \
                   '{type} {exp_name} {comp_name}"' \
                   ''.format(
                        host=self.host if self.host is not None else __LH__,
                        prog=get_prog(),
                        subprog=self.subprog,
                        last_lines=self.last_lines,
                        type=self.type,
                        exp_name=self.exp_name,
                        comp_name=self.comp_name)

        def __call__(self):
            storage = PickleStorage(self.exp_name)
            if self.type == "log":
                storage.print_log(self.comp_name, last_lines=self.last_lines)
            else:
                # result / state
                # TODO do something more portable
                if self.type == "state":
                    fpath = os.path.join(storage._get_notif_db(),
                                         "{}.pkl".format(self.comp_name))
                elif self.type == "result":
                    fpath = os.path.join(storage._get_result_db(),
                                         "{}.pkl".format(self.comp_name))
                else:
                    raise ValueError(
                        "Type '{}' does not exist".format(self.type))

                with open(fpath, "rb") as handle:
                    try:
                        raw = pickle.load(handle)
                    except Exception:
                        raw = dill.load(handle)
                    print(repr(raw))

    @classmethod
    def subprog_name(cls):
        return "display"

    @classmethod
    def fill_in_subparser(cls, subparser):
        parser = subparsers.add_parser(cls.subprog_name())
        parser.add_argument("type", choices=["result", "state", "log"])
        parser.add_argument("query", help=query_doc)
        parser.add_argument("computation",
                            help="Computation name or number")
        parser.add_argument("--last-lines",
                            help="Number of line to print or "
                                 "None (default: None)",
                            type=or_none(int), default=None)
        parser.set_defaults(func=cls.run)
        return parser

    @classmethod
    def to_queries(cls, type, query, computation, last_lines=None, **kwargs):
        host, exp_name = split_host_and_exp(query)

        comp_name = computation
        try:
            comp_num = int(comp_name)
            comp_name = Experiment.name_computation(exp_name, comp_num)
        except ValueError:
            pass

        return [cls.PrintQuery(host, cls.subprog_name(), type, exp_name,
                               comp_name, last_lines)]


def simple_subprog_factory(cls_name, prog_name, action):
    def fill_in_subparser(cls, subparser):
        parser = subparser.add_parser(prog_name)
        parser.add_argument("query", help=query_doc)
        parser.set_defaults(func=cls.run)
        return parser

    def to_queries(cls, query, **kwargs):
        host, exp_name = split_host_and_exp(query)
        return [SimpleQuery(host, prog_name, exp_name, action)]

    return type(cls_name, (SubProg,),
                {
                    "subprog_name": classmethod(lambda cls: prog_name),
                    "fill_in_subparser": classmethod(fill_in_subparser),
                    "to_queries": classmethod(to_queries)
                })


def monitor_wrapper(func):
    def action(exp_name):
        try:
            hostname = socket.gethostname()
        except Exception:
            hostname = "Unknown host"
        try:
            monitor = Monitor(exp_name)
            print(hostname, ":", exp_name, monitor.count_by_state(), end=" ")
            func(monitor)
            monitor.refresh()
            print("-->", monitor.count_by_state())
        except Exception:
            print("No such experiment")

    return action

Aborted2LaunchableProg = simple_subprog_factory(
    "Abr2LchProg",
    "abr2lch",
    monitor_wrapper(lambda monitor: monitor.aborted_to_launchable())
)

ResetProg = simple_subprog_factory(
    "ResetProg",
    "reset",
    monitor_wrapper(lambda monitor: monitor.reset())
)


if __name__ == '__main__':
    shutup_logger()
    parser = argparse.ArgumentParser(
        description="General command line utility for Clustertools. The purpose"
                    " is to ease frequent tasks and to do so without a Python "
                    "interpreter."
    )
    subparsers = parser.add_subparsers(title="Subcommands",
                                       description="Valid subcommands")

    # Count by state
    Counter.fill_in_subparser(subparsers)

    # Display
    Displayer.fill_in_subparser(subparsers)

    # Aborted to launchable
    Aborted2LaunchableProg.fill_in_subparser(subparsers)

    # Reset
    ResetProg.fill_in_subparser(subparsers)

    args = parser.parse_args()
    if not hasattr(args, "func"):
        parser.print_help()
    else:
        args.func(args)
